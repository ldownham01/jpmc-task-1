From 41e859b4ca5fc4a56642e1f02597f65944a3a0bd Mon Sep 17 00:00:00 2001
From: luke downham <ldownham2016@gmail.com>
Date: Sat, 1 Oct 2022 11:51:42 +0000
Subject: [PATCH] Create Patch File

---
 client3.py     | 69 +++++++++++++++++++++-----------------------------
 client_test.py | 22 +++++++++++++++-
 2 files changed, 50 insertions(+), 41 deletions(-)

diff --git a/client3.py b/client3.py
index f1771c3..4d02e3e 100644
--- a/client3.py
+++ b/client3.py
@@ -1,59 +1,48 @@
-################################################################################
-#
-#  Permission is hereby granted, free of charge, to any person obtaining a
-#  copy of this software and associated documentation files (the "Software"),
-#  to deal in the Software without restriction, including without limitation
-#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
-#  and/or sell copies of the Software, and to permit persons to whom the
-#  Software is furnished to do so, subject to the following conditions:
-#
-#  The above copyright notice and this permission notice shall be included in
-#  all copies or substantial portions of the Software.
-#
-#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
-#  DEALINGS IN THE SOFTWARE.
+#This is where you would manually type the existing code in the client3.py, which is inside the jpm_module_1 folder (disregard copying the useless comments) so that you can avoid the dreaded tab editing issues in REPL particularly for the Python environment only
+
+#After manually copying the useful code in client3.py, you can make your changes here
+
+#Before you test your modified code is working, make sure you have done the initial steps needed to be done before making changes in the instruction slides
+
+#Then, to test, first, delete the client3.py file inside jpm_module_1. Then rename this file to just client3.py. Finally move this file inside the jpm_module_1 folder  
+
+# Delete these comments when you're done...
+# Comments are anything that's preceded with '#'
 
 import urllib.request
 import time
 import json
 import random
 
-# Server API URLs
 QUERY = "http://localhost:8080/query?id={}"
 
-# 500 server request
 N = 500
 
 def getDataPoint(quote):
-	""" Produce all of the needed values to generate a datapoint """
-	""" ------------- Update this function ------------- """
-	stock = quote['stock']
-	bid_price = float(quote['top_bid']['price'])
-	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
-	return stock, bid_price, ask_price, price
+  stock = quote['stock']
+  bid_price = float(quote['top_bid']['price'])
+  ask_price = float(quote['top_ask']['price'])
+  price = (bid_price + ask_price)/2
+  return stock, bid_price, ask_price, price
 
 def getRatio(price_a, price_b):
-	""" Get ratio of price_a and price_b """
-	""" ------------- Update this function ------------- """
-	""" Also create some unit tests for this function in client_test.py """
-	return 1
+  if(price_b == 0):
+    return
+  return price_a / price_b
 
 # Main
 if __name__ == "__main__":
 
-	# Query the price once every N seconds.
-	for _ in iter(range(N)):
-		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+  for _ in iter(range(N)):
+
+    quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+    
+    prices = {}
 
-		""" ----------- Update to get the ratio --------------- """
-		for quote in quotes:
-			stock, bid_price, ask_price, price = getDataPoint(quote)
-			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+    for quote in quotes:
+      stock, bid_price, ask_price, price = getDataPoint(quote)
+      prices[stock] = price
+      print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-		print ("Ratio %s" % getRatio(price, price))
+    print ("Ratio %s" % (getRatio(prices['ABC'], prices['DEF'])))
+    
\ No newline at end of file
diff --git a/client_test.py b/client_test.py
index af2bf26..2b2ed12 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,5 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -8,6 +8,8 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['topbid']['price'], quote['topask']['price'], (quote['topbid']['price'] + quote['topask']['price'])/2))
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,10 +17,28 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['topbid']['price'], quote['topask']['price'], (quote['topbid']['price'] + quote['topask']['price'])/2))
 
 
   """ ------------ Add more unit tests ------------ """
+  def test_getRatio_calculateRatio(self):
+    priceA = ((120.48 + 119.2)/2)
+    priceB = ((121.68 + 117.87)/2)
 
+    self.assertEqual(getRatio(priceA, priceB), (priceA/priceB))
+  
+  def test_getRatio_priceA_isZero(self):
+    priceA = 0
+    priceB = ((121.68 + 117.87)/2)
+
+    self.assertEqual(getRatio(priceA, priceB), (priceA/priceB))
+
+    def test_getRatio_priceB_isZero(self):
+    priceA = ((120.48 + 119.2)/2)
+    priceB = 0
+
+    self.assertEqual(getRatio(priceA, priceB), (priceA/priceB))
 
 
 if __name__ == '__main__':
-- 
2.17.1

